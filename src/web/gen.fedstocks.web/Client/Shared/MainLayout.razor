@using System.Collections.Specialized;
@using gen.fedstocks.web.Client.Resources
@using gen.fedstocks.web.Client.Services
@using MudBlazor.Utilities
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inherits LayoutComponentBase

@inject NavigationManager Navigation
@inject SignOutSessionStateManager SignOutManager
@inject ITopbarItemsService TopbarItemsService
@inject CommandIconManager IconManager

<MudThemeProvider Theme="@CurrentTheme" />
<MudDialogProvider />

<MudLayout>
    <MudAppBar Elevation="0" Style="border-bottom: 1px; border-bottom-color: gainsboro; border-bottom-style: solid;">
        <AuthorizeView>
            <Authorized>
                <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@(_ => DrawerToggle())" />
            </Authorized>
            <NotAuthorized>
                <MudIcon Icon="@FedIcons.Logos.Brand" Color="Color.Primary" Size="Size.Large" ViewBox="0 0 116 20" Style="font-size: 7rem;" />
            </NotAuthorized>
        </AuthorizeView>
        <MudSpacer />
        @foreach (var item in TopbarItemsService.RightMenuItems)
        {
            <MudTooltip Text="@GetLocalization(item)">
                <MudIconButton Color="Color.Inherit" Icon="@GetIconForMenuItem(item)" Command="TopbarItemsService.MenuItemClickedCommand" CommandParameter="@item" />
            </MudTooltip>
        }
        <MudDivider Vertical="true" DividerType="DividerType.Middle" Light="false" class="mx-4 my-4" />
        <AuthorizeView>
            <Authorized>
                <MudTooltip Text="@context.User.Identity.Name">
                    <MudMenu Icon="@Icons.Material.Rounded.AccountCircle" Color="Color.Inherit" Size="Size.Medium" AnchorOrigin="Origin.BottomCenter">
                        <MudMenuItem OnClick="NavigateToProfile">Profile</MudMenuItem>
                        <MudDivider />
                        <MudMenuItem OnClick="BeginSignOut">Logout</MudMenuItem>
                    </MudMenu>
                </MudTooltip>
            </Authorized>
            <NotAuthorized>
                <MudTooltip Text="Login">
                    <MudIconButton Href="Authentication/login" Icon="@Icons.Material.Rounded.Login" Color="Color.Inherit" Size="Size.Medium" />
                </MudTooltip>
            </NotAuthorized>
        </AuthorizeView>
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen"
               Elevation="0"
               Variant="@DrawerVariant.Responsive" 
               OpenMiniOnHover="true" 
               ClipMode="DrawerClipMode.Never"
               Style="border-right: 1px; border-right-color: gainsboro; border-right-style: solid; animation: none">
        <MudDrawerHeader>
            <MudIcon Icon="@FedIcons.Logos.Brand" Color="Color.Primary" ViewBox="0 0 116 20" Style="font-size: 7rem;" />
        </MudDrawerHeader>
        <AuthorizeView>
            <Authorized>
                <NavMenu />
            </Authorized>
        </AuthorizeView>
    </MudDrawer>
    <MudMainContent>
        <MudContainer>
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    private readonly MudTheme CurrentTheme = new()
        {
            Palette = new Palette()
            {
                AppbarBackground = Colors.Grey.Lighten4,
                Background = Colors.Grey.Lighten4,
                AppbarText = Colors.Shades.Black,
                Primary = new MudColor("#116D34")
            }
        };

    bool _drawerOpen;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private string GetIconForMenuItem(string itemName)
    {
        return IconManager.GetIcon(itemName);
    }

    private string GetLocalization(string input) //TODO localization
    {
        return input;
    }

    private void OnRightMenuItemsCollectionChanged(object sender, NotifyCollectionChangedEventArgs args)
    {
        if (args.Action == NotifyCollectionChangedAction.Add || (args.Action == NotifyCollectionChangedAction.Reset && (args.OldItems?.Count > 0 || args.OldItems == null)))
        {
            InvokeAsync(StateHasChanged).AndForget();
        }
    }

    private async Task NavigateToProfile()
    {
        Navigation.NavigateTo("http://localhost:8080/realms/fed/account/#/personal-info");
    }

    private async Task BeginSignOut()
    {
        await SignOutManager.SetSignOutState();
        Navigation.NavigateTo("authentication/logout");
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return Task.CompletedTask;
        }

        TopbarItemsService.RightMenuItems.CollectionChanged += OnRightMenuItemsCollectionChanged;

        return Task.CompletedTask;
    }
}