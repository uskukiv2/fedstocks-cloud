// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;
using fed.cloud.product.infrastructure;

#nullable disable

namespace fed.cloud.product.host.Infrastructure.Migrations
{
    [DbContext(typeof(ProductContext))]
    partial class ProductContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("fed.cloud.product.domain.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("GlobalId")
                        .HasColumnType("integer")
                        .HasColumnName("GlobalId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "russian")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "GlobalId" });

                    b.HasKey("Id");

                    b.HasIndex("SearchVector");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVector"), "GIN");

                    b.ToTable("countries", "product");
                });

            modelBuilder.Entity("fed.cloud.product.domain.Entities.County", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid")
                        .HasColumnName("CountryId");

                    b.Property<Guid?>("CountryId1")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<int>("NumberInCountry")
                        .HasColumnType("integer")
                        .HasColumnName("Number");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CountryId1");

                    b.ToTable("counties", "product");
                });

            modelBuilder.Entity("fed.cloud.product.domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Brand");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("CategoryId");

                    b.Property<int>("CategoryId1")
                        .HasColumnType("integer");

                    b.Property<long>("GlobalNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("GlobalNumber");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("text")
                        .HasColumnName("Manufacturer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<double>("QuantityRate")
                        .HasColumnType("double precision")
                        .HasColumnName("QuantityRate");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "russian")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Brand", "Name", "GlobalNumber" });

                    b.Property<int>("UnitId")
                        .HasColumnType("integer")
                        .HasColumnName("UnitId");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CategoryId1");

                    b.HasIndex("SearchVector");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVector"), "GIN");

                    b.HasIndex("UnitId");

                    b.ToTable("products", "product");
                });

            modelBuilder.Entity("fed.cloud.product.domain.Entities.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("ParentId");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("productcategories", "product");
                });

            modelBuilder.Entity("fed.cloud.product.domain.Entities.ProductSellerPrice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("OriginalCurrencyNumber")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("OriginalCurrencyNumber");

                    b.Property<decimal?>("OriginalPrice")
                        .IsRequired()
                        .HasColumnType("numeric")
                        .HasColumnName("OriginalPrice");

                    b.Property<decimal?>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("Price");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("ProductId");

                    b.Property<Guid>("SellerId")
                        .HasColumnType("uuid")
                        .HasColumnName("SellerId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SellerId");

                    b.ToTable("productsellerprices", "product");
                });

            modelBuilder.Entity("fed.cloud.product.domain.Entities.ProductUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<double>("Rate")
                        .HasColumnType("double precision")
                        .HasColumnName("Rate");

                    b.HasKey("Id");

                    b.ToTable("productunits", "product");
                });

            modelBuilder.Entity("fed.cloud.product.domain.Entities.SellerCompany", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid")
                        .HasColumnName("CountryId");

                    b.Property<Guid>("CountyId")
                        .HasColumnType("uuid")
                        .HasColumnName("CountyId");

                    b.Property<string>("OriginalName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("OriginalName");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "russian")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "OriginalName" });

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CountyId");

                    b.HasIndex("SearchVector");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVector"), "GIN");

                    b.ToTable("sellercompanies", "product");
                });

            modelBuilder.Entity("fed.cloud.product.domain.Entities.County", b =>
                {
                    b.HasOne("fed.cloud.product.domain.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("fed.cloud.product.domain.Entities.Country", null)
                        .WithMany("Counties")
                        .HasForeignKey("CountryId1");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("fed.cloud.product.domain.Entities.Product", b =>
                {
                    b.HasOne("fed.cloud.product.domain.Entities.ProductCategory", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("fed.cloud.product.domain.Entities.ProductCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("fed.cloud.product.domain.Entities.ProductUnit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("fed.cloud.product.domain.Entities.ProductCategory", b =>
                {
                    b.HasOne("fed.cloud.product.domain.Entities.ProductCategory", "ParentCategory")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("fed.cloud.product.domain.Entities.ProductSellerPrice", b =>
                {
                    b.HasOne("fed.cloud.product.domain.Entities.Product", "Product")
                        .WithMany("SellerPrices")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("fed.cloud.product.domain.Entities.SellerCompany", "Seller")
                        .WithMany("SellerPrices")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("fed.cloud.product.domain.Entities.SellerCompany", b =>
                {
                    b.HasOne("fed.cloud.product.domain.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("fed.cloud.product.domain.Entities.County", "County")
                        .WithMany()
                        .HasForeignKey("CountyId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("County");
                });

            modelBuilder.Entity("fed.cloud.product.domain.Entities.Country", b =>
                {
                    b.Navigation("Counties");
                });

            modelBuilder.Entity("fed.cloud.product.domain.Entities.Product", b =>
                {
                    b.Navigation("SellerPrices");
                });

            modelBuilder.Entity("fed.cloud.product.domain.Entities.SellerCompany", b =>
                {
                    b.Navigation("SellerPrices");
                });
#pragma warning restore 612, 618
        }
    }
}
